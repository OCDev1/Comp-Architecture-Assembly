.extern printf
.extern scanf
.extern pstrlen
.extern swapCase
.extern pstrijcpy

.section .data

.section .rodata
pstrlen_print_fmt:
    .string "first pstring length: %d, second pstring length: %d\n"

swapCase_print_fmt:
    .string "length: %d, string: %s\n"

invalid_print_fmt:
    .string "invalid option!\n"

invalid_print_fmt1:
    .string "invalid input!\n"

scanf_fmt_3:
    .string "%d %d"

ijcheck:
    .string "i: %d j: %d \n"

.section .text
.globl run_func
.type	run_func, @function
run_func:
    # Enter
    pushq %rbp
    movq %rsp, %rbp

    xor %r12, %r12
    xor %r13, %r13
    xor %r14, %r14

    # saving arguments in registers
    mov %rdi, %r12      # saving choice in r12
    mov %rsi, %r13      # saving 1st string address in r13
    mov %rdx, %r14      # saving 2nd string address in r14

    # if choice is 31 call pstrlen
    cmp $0x1F, %rdi
    je .pstrlenCall

    # if choice is 33 call swapCase
    cmp $0x21, %rdi
    je .swapCaseCall

    # if choice is 34 call psrijcpy
    cmp $0x22, %rdi
    je .pstrijcpyCall

    # if input is invalid
    jmp .invalid


.invalid:
    mov $invalid_print_fmt, %rdi
    call printf

# Exit
    xorq %rax, %rax
    movq %rbp, %rsp
    popq %rbp
    ret

.pstrlenCall:
        # first return val will be saved in r10
        mov %r13, %rdi
        call pstrlen        # first call
        mov %rax, %r10
        xor %rdi, %rdi
        xor %rsi, %rsi
        xor %rdx, %rdx

        # second return val will be saved in r15
        mov %r14, %rdi
        call pstrlen        # second call
        mov %rax, %r15

        # print the final text with values
        movq $pstrlen_print_fmt, %rdi
        movq %r10, %rsi     # first val
        movq %r15, %rdx     # second val
        call printf
# Exit
    xorq %rax, %rax
    movq %rbp, %rsp
    popq %rbp
    ret

.swapCaseCall:
        # first return pointer will be saved in r10, length will be saved in r15
                mov %r13, %rdi
                call pstrlen
                mov %rax, %r15
                mov %r13, %rdi
                call swapCase        # first call
                mov %rax, %r10       # save return val in r10
                xor %rdi, %rdi
                xor %rsi, %rsi
                xor %rdx, %rdx

                # Print the result
                xor %rsi, %rsi
                movq $swapCase_print_fmt, %rdi      # text
                mov %r15, %rsi                      # number
                xor %rdx, %rdx
                movq %r10, %rdx                     # string
                xorq %rax, %rax
                call printf

        # second return pointer will be saved in r10, length will be saved in r15
                mov %r14, %rdi
                call pstrlen
                mov %rax, %r15
                mov %r14, %rdi
                call swapCase        # second call
                mov %rax, %r10       # save return val in r10
                xor %rdi, %rdi
                xor %rsi, %rsi
                xor %rdx, %rdx

        # Print the result
                xor %rsi, %rsi
                movq $swapCase_print_fmt, %rdi      # text
                mov %r15, %rsi                      # number
                xor %rdx, %rdx
                movq %r10, %rdx                     # string
                xorq %rax, %rax
                call printf

 # Exit
    xorq %rax, %rax
    movq %rbp, %rsp
    popq %rbp
    ret

#|/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////|

.invalidIndex:
    mov $invalid_print_fmt1, %rdi
    call printf

    mov %r13, %rdi
    call pstrlen

    mov $swapCase_print_fmt, %rdi
    mov %rax, %rsi
    mov %r13, %rdx
    call printf 

  mov %r14, %rdi
    call pstrlen
    mov $swapCase_print_fmt, %rdi
    mov %rax, %rsi
    mov %r14, %rdx
    call printf 

# Exit
    xorq %rax, %rax
    movq %rbp, %rsp
    popq %rbp
    ret

.pstrijcpyCall:
    # allocate space for i,j
    sub $16, %rsp

    # scanning for i,j
    xor %rdi, %rdi
    xor %rsi, %rsi
    xor %rdx, %rdx
    xor %r12, %r12
    xor %r15, %r15

    mov $scanf_fmt_3, %rdi
    lea -8(%rbp), %rsi
    lea -16(%rbp), %rdx
    call scanf

    mov -8(%rbp), %r12
    mov %rsi, %r15

    add $16, %rsp       # release the vars on the stack

    # check j>=i 
    cmp %r12, %r15
    jl .invalidIndex

    # input check, check lengths of both strings and compare with i,j
    # check validity of 1st string size compared to i,j
    mov %r13, %rdi
    xor %rax, %rax
    call pstrlen        # get string1 length
    sub $1, %rax
    cmp %r15, %rax      # check str1 len>=j
    jl .invalidIndex

    # check validity of 2nd string size compared to i,j
    mov %r14, %rdi
    xor %rax, %rax
    call pstrlen        # get string1 length
    sub $1, %rax
    cmp %r15, %rax      # check str1 len>=j
    jl .invalidIndex
    
    # if we get here i,j are ok
    mov %r13, %rdi      #str1
    mov %r14, %rsi      #str2
    mov %r12, %rdx      #i
    mov %r15, %rcx      #j

    call pstrijcpy
    mov %rax, %r14      # save dst string

    # first print
    mov %r13, %rdi
    call pstrlen
    mov $swapCase_print_fmt, %rdi
    mov %rax, %rsi
    inc %r13
    mov %r13, %rdx
    call printf

    # second print
    mov %r14, %rdi
    call pstrlen

    mov $swapCase_print_fmt, %rdi
    mov %rax, %rsi
    mov %r14, %rdx
    call printf

    # Exit
    xorq %rax, %rax
    movq %rbp, %rsp
    popq %rbp
    ret
