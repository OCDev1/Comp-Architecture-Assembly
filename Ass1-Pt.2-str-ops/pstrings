.extern printf
.extern scanf

.section .data

.section .rodata
# pstrlen_print_fmt:
  #  .string "first pstring length: %d, second pstring length: %d\n"

# swapCase_print_fmt:
  #  .string "length: %d, string: %s\n"

# swapCase_print_fmt2:
 #   .string "length: %d, string: %s"

scanf_fmt_3:
    .string "%d %d"

.section .text

# ---------------PSTRLEN-----------------------

.globl pstrlen
.type	pstrlen, @function
pstrlen:
     # Enter
        pushq %rbp
        movq %rsp, %rbp

        # make a counter out of r11
          xor %r11, %r11
        # loop to count the string, length kept in r11
                .loop2:
                    # Read byte from string
                    movb (%rdi), %al

                    # If were at the end of the string, exit
                    cmpb $0x0, %al
                    je .done

                    # else continue counting
                    jne .next2

                .next2:
                    # Increment the pointer and counter, and continue to next iteration
                    inc %r11
                    incq %rdi
                    jmp .loop2

        .done:
            # put the result in rax and return
            dec %r11
            movq %r11, %rax

# Exit
     xor %rdi, %rdi
     xor %rsi, %rsi
     xor %rdx, %rdx
    movq %rbp, %rsp
    popq %rbp
    ret

#--------------------SWAP-CASE-----------------------------

.globl swapCase
.type	swapCase, @function
swapCase:
     # Enter
        pushq %rbp
        movq %rsp, %rbp

 # Change every instance of small caps to big and vice-versa
 # save original adress in r12
 mov %rdi, %r12

  # make a counter out of r11
           xor %r11, %r11

# the loop
.loop21:
    # Read byte from string
    movb (%rdi), %al
    add $0x1, %r11

    # If at the end of the string, exit
    cmpb $0x0, %al
    je .done2

    # If the byte is small, change it to caps
    cmpb $0x61, %al
    jge .lowerSecCheck      # possibly lower case letter

    # If the byte is caps, change it to small
    cmpb $0x41, %al
    jge .upperSecCheck      # possibly upper case letter

.next21:
    # Increment the pointer and counter , and continue to next iteration
    incq %rdi
    jmp .loop21

.lowerSecCheck:
    cmpb $0x7A, %al
    jle .lowerToUpper       # confirmed lower case letter
    jmp .next21                   # not a letter at all

.upperSecCheck:
    cmpb $0x5A, %al
    jle .upperToLower       # confirmed upper case letter
    jmp .next21                   # not a letter at all

.lowerToUpper:
    subb $0x20, %al
    movb %al, (%rdi)
    jmp .next21

.upperToLower:
    addb $0x20, %al
    movb %al, (%rdi)
    jmp .next21

.done2:
    #   put the new string in rax and return
    inc %r12
    mov %r12, %rax

# Exit
    xor %rdi, %rdi
    xor %rsi, %rsi
    xor %rdx, %rdx
    movq %rbp, %rsp
    popq %rbp
    ret

#--------------------------PSTRIJCPY---------------------------

.globl pstrijcpy
.type	pstrijcpy, @function
pstrijcpy:
     # Enter
        pushq %rbp
        movq %rsp, %rbp

# saving pointer to dest
xor %r10, %r10
mov %r14, %r10
# make r11 a counter
xor %r11, %r11
mov $-1, %r11
.loop:
    #if we are not at i, continue til i
    cmp %r12, %r11
    jl .next
    
    # If we're past j, exit
    cmp %r15, %r11
    jg .done3

    # Read byte from src
    movb (%rsi), %al

    # copy the byte from src to dst
    movb %al, (%rdi)
    jne .next
    

.next:
    # Increment the pointer and counter, and continue to next iteration
    incq %rdi
    incq %rsi
    inc %r11
    jmp .loop

.done3:
    # return pointer to dest
    xor %rax, %rax
    mov %r10, %rax

# Exit
    xor %rdi, %rdi
    xor %rsi, %rsi
    xor %rdx, %rdx
    xor %r10, %r10
    movq %rbp, %rsp
    popq %rbp
    ret

    
